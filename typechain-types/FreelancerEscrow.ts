/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FreelancerEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assignFreelancer"
      | "cancelJob"
      | "completeJob"
      | "createJob"
      | "getJob"
      | "getJobCount"
      | "jobCount"
      | "jobs"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "JobAssigned"
      | "JobCancelled"
      | "JobCompleted"
      | "JobCreated"
      | "JobDisputed"
      | "JobRefunded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assignFreelancer",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "completeJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createJob",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getJob",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getJobCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "jobCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "jobs", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "assignFreelancer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancelJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "completeJob",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getJobCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jobCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "jobs", data: BytesLike): Result;
}

export namespace JobAssignedEvent {
  export type InputTuple = [jobId: BigNumberish, freelancer: AddressLike];
  export type OutputTuple = [jobId: bigint, freelancer: string];
  export interface OutputObject {
    jobId: bigint;
    freelancer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCancelledEvent {
  export type InputTuple = [jobId: BigNumberish];
  export type OutputTuple = [jobId: bigint];
  export interface OutputObject {
    jobId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCompletedEvent {
  export type InputTuple = [jobId: BigNumberish];
  export type OutputTuple = [jobId: bigint];
  export interface OutputObject {
    jobId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobCreatedEvent {
  export type InputTuple = [
    jobId: BigNumberish,
    client: AddressLike,
    title: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    jobId: bigint,
    client: string,
    title: string,
    amount: bigint
  ];
  export interface OutputObject {
    jobId: bigint;
    client: string;
    title: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobDisputedEvent {
  export type InputTuple = [jobId: BigNumberish];
  export type OutputTuple = [jobId: bigint];
  export interface OutputObject {
    jobId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobRefundedEvent {
  export type InputTuple = [jobId: BigNumberish];
  export type OutputTuple = [jobId: bigint];
  export interface OutputObject {
    jobId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FreelancerEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): FreelancerEscrow;
  waitForDeployment(): Promise<this>;

  interface: FreelancerEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assignFreelancer: TypedContractMethod<
    [_jobId: BigNumberish, _freelancer: AddressLike],
    [void],
    "nonpayable"
  >;

  cancelJob: TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;

  completeJob: TypedContractMethod<
    [_jobId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createJob: TypedContractMethod<
    [_title: string, _description: string],
    [bigint],
    "payable"
  >;

  getJob: TypedContractMethod<
    [_jobId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        client: string;
        freelancer: string;
        amount: bigint;
        title: string;
        description: string;
        status: bigint;
        createdAt: bigint;
        completedAt: bigint;
      }
    ],
    "view"
  >;

  getJobCount: TypedContractMethod<[], [bigint], "view">;

  jobCount: TypedContractMethod<[], [bigint], "view">;

  jobs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        client: string;
        freelancer: string;
        amount: bigint;
        title: string;
        description: string;
        status: bigint;
        createdAt: bigint;
        completedAt: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assignFreelancer"
  ): TypedContractMethod<
    [_jobId: BigNumberish, _freelancer: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelJob"
  ): TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "completeJob"
  ): TypedContractMethod<[_jobId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createJob"
  ): TypedContractMethod<
    [_title: string, _description: string],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getJob"
  ): TypedContractMethod<
    [_jobId: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        client: string;
        freelancer: string;
        amount: bigint;
        title: string;
        description: string;
        status: bigint;
        createdAt: bigint;
        completedAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJobCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "jobs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [
        bigint,
        string,
        string,
        bigint,
        string,
        string,
        bigint,
        bigint,
        bigint
      ] & {
        id: bigint;
        client: string;
        freelancer: string;
        amount: bigint;
        title: string;
        description: string;
        status: bigint;
        createdAt: bigint;
        completedAt: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "JobAssigned"
  ): TypedContractEvent<
    JobAssignedEvent.InputTuple,
    JobAssignedEvent.OutputTuple,
    JobAssignedEvent.OutputObject
  >;
  getEvent(
    key: "JobCancelled"
  ): TypedContractEvent<
    JobCancelledEvent.InputTuple,
    JobCancelledEvent.OutputTuple,
    JobCancelledEvent.OutputObject
  >;
  getEvent(
    key: "JobCompleted"
  ): TypedContractEvent<
    JobCompletedEvent.InputTuple,
    JobCompletedEvent.OutputTuple,
    JobCompletedEvent.OutputObject
  >;
  getEvent(
    key: "JobCreated"
  ): TypedContractEvent<
    JobCreatedEvent.InputTuple,
    JobCreatedEvent.OutputTuple,
    JobCreatedEvent.OutputObject
  >;
  getEvent(
    key: "JobDisputed"
  ): TypedContractEvent<
    JobDisputedEvent.InputTuple,
    JobDisputedEvent.OutputTuple,
    JobDisputedEvent.OutputObject
  >;
  getEvent(
    key: "JobRefunded"
  ): TypedContractEvent<
    JobRefundedEvent.InputTuple,
    JobRefundedEvent.OutputTuple,
    JobRefundedEvent.OutputObject
  >;

  filters: {
    "JobAssigned(uint256,address)": TypedContractEvent<
      JobAssignedEvent.InputTuple,
      JobAssignedEvent.OutputTuple,
      JobAssignedEvent.OutputObject
    >;
    JobAssigned: TypedContractEvent<
      JobAssignedEvent.InputTuple,
      JobAssignedEvent.OutputTuple,
      JobAssignedEvent.OutputObject
    >;

    "JobCancelled(uint256)": TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;
    JobCancelled: TypedContractEvent<
      JobCancelledEvent.InputTuple,
      JobCancelledEvent.OutputTuple,
      JobCancelledEvent.OutputObject
    >;

    "JobCompleted(uint256)": TypedContractEvent<
      JobCompletedEvent.InputTuple,
      JobCompletedEvent.OutputTuple,
      JobCompletedEvent.OutputObject
    >;
    JobCompleted: TypedContractEvent<
      JobCompletedEvent.InputTuple,
      JobCompletedEvent.OutputTuple,
      JobCompletedEvent.OutputObject
    >;

    "JobCreated(uint256,address,string,uint256)": TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;
    JobCreated: TypedContractEvent<
      JobCreatedEvent.InputTuple,
      JobCreatedEvent.OutputTuple,
      JobCreatedEvent.OutputObject
    >;

    "JobDisputed(uint256)": TypedContractEvent<
      JobDisputedEvent.InputTuple,
      JobDisputedEvent.OutputTuple,
      JobDisputedEvent.OutputObject
    >;
    JobDisputed: TypedContractEvent<
      JobDisputedEvent.InputTuple,
      JobDisputedEvent.OutputTuple,
      JobDisputedEvent.OutputObject
    >;

    "JobRefunded(uint256)": TypedContractEvent<
      JobRefundedEvent.InputTuple,
      JobRefundedEvent.OutputTuple,
      JobRefundedEvent.OutputObject
    >;
    JobRefunded: TypedContractEvent<
      JobRefundedEvent.InputTuple,
      JobRefundedEvent.OutputTuple,
      JobRefundedEvent.OutputObject
    >;
  };
}
